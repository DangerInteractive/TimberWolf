@startuml

' -- GAME ENGINE CLASSES -- '

package "Asset Control" #eeeeee {

    class AssetStore <<Static>> {
        - std::map<std::string, std::shared_ptr<Font>> m_fonts
        - std::map<std::string, std::shared_ptr<Image>> m_images
        - std::map<std::string, std::shared_ptr<Sound>> m_sounds
        + std::shared_ptr<Font> createFont (std::string, auto args...)
        + bool registerFont (std::string std::shared_ptr<Font>);
        + bool registerFont (std::string, Font*)
        + std::shared_ptr<Font> getFont (std::string)
        + std::shared_ptr<Image> createImage (std::string, auto args...)
        + bool registerImage (std::string, std::shared_ptr<Image>)
        + bool registerImage (std::string, Image*)
        + std::shared_ptr<Image> getImage (std::string)
        + std::shared_ptr<Sound> createSound (std::string, auto args...)
        + bool registerSound (std::string, std::shared_ptr<Sound>)
        + bool registerSound (std::string, Sound*)
        + Sound* getSound (std::string)
    }

    class Font {

    }

    class Image {

    }

    class Sound {

    }

}

package "Data Storage System" #eeeeee {

    class Config <<Static>> {

    }

    class Storage <<Static>> {

    }

}

package "Game State Control" #eeeeee {

    interface GameState {
        + void render (double)
        + void update ()
    }

    class GameStateManager <<Static>> {
        - std::vector<GameState> m_states
        + void render (double)
        + void update ()
    }

    class GameStateStore <<Static>> {
        - std::map<std::string, std::shared_ptr<GameState>> m_states
        + std::shared_ptr<GameState> create<T> (std::string, auto args...)
        + bool register (std::string, std::shared_ptr<GameState>)
        + bool register (std::string, GameState*)
        + GameState* get (std::string)
    }

}

package "Inner Loop" #eeeeee {

    class GameLoop <<Static>> {
        - std::thread m_updateThread
        + void run ()
        + void freeze ()
        + void stop ()
    }

}

package "Input Handling" #eeeeee {

    class Controller {

    }

    class Keybinding {

    }

    enum KeyAction {
        PRESS
        RELEASE
        REPEAT
    }

    enum KeyType {
        ...
    }

}

package "Logging System" #eeeeee {

    class Log <<static>> {
        - LogLevel m_logLevel
        + LogLevel getFilterLevel ()
        + void setFilterLevel (LogLevel)
        + void log (std::string, LogLevel)
        + void verbose (std::string)
        + void notice (std::string)
        + void warning (std::string)
        + void error (std::string)
        + void bindUnhandledException ()
        + void unhandledException ()
    }

    enum LogLevel {
        UNDEFINED
        VERBOSE
        NOTICE
        WARNING
        ERROR
    }

}

package "Random Number Generator" #eeeeee {

    class NoiseGenerator {

    }

    class Random <<Static>> {
        + int getInteger (int, int)
        + float getFloat ()
        + float getFloat (float, float)
        + double getDouble ()
        + double getDouble (double, double)
    }

}

package "Rendering System" #eeeeee {

    class Camera {

    }

    class Entity {

    }

    class Light {

    }

    class Model {

    }

    class SceneManager <<Static>> {

    }

    class SceneNode {

    }

}

package "Window Control" #eeeeee {

    class Window <<Static>> {

    }

}

package "World Stage" #eeeeee {

    class Universe <<Static>> {

    }

    class World {

    }

}

class Color {
    + unsigned char r
    + unsigned char g
    + unsigned char b
    + unsigned char a
}

' -- GAME ENGINE PATHS -- '
Font --o AssetStore
Image --o AssetStore
Sound --o AssetStore
GameState --* GameStateManager
GameStateManager --> GameStateStore
GameStateManager --> GameState
GameLoop --> Window
GameLoop --> GameStateManager
GameLoop --> Renderer
Controller --o GameState
Keybinding --o Controller
Controller --> Keybinding
KeyAction --o Keybinding
KeyType --o Keybinding
LogLevel --o Log
GameStateManager --> Log
GameLoop --> Log
Window --> Log
SceneManager --> Window
Color --o SceneManager
SceneNode --* SceneManager
SceneManager --> SceneNode
Camera --o SceneManager
Camera --o SceneNode
Entity --o SceneManager
Entity --o SceneNode
Light --o SceneManager
Light --o SceneNode

@enduml
